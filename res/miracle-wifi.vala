/* Generated by vala-dbus-binding-tool 0.4.0. Do not modify! */
/* Generated with: /usr/bin/vala-dbus-binding-tool --gdbus --no-synced --rename-namespace=org:Org --rename-namespace=freedesktop:Freedesktop --rename-namespace=miracle:Miracle --rename-namespace=wifi:Wifi --rename-namespace=wfd:Wfd --api-path=/home/derekdai/Projects/miraclecast/demo/dbus */
using GLib;

namespace Org {

	namespace Freedesktop {

		namespace Miracle {

			namespace Wifi {

				[DBus (name = "org.freedesktop.miracle.wifi.Peer")]
				public interface Peer : GLib.Object {

					[DBus (name = "Connect", timeout = 120000)]
					public abstract void connect(string param0, string param1) throws DBusError, IOError;

					[DBus (name = "Disconnect", timeout = 120000)]
					public abstract void disconnect() throws DBusError, IOError;

					[DBus (name = "Link", timeout = 120000)]
					public abstract GLib.ObjectPath link { owned get; }

					[DBus (name = "P2PMac", timeout = 120000)]
					public abstract string p2p_mac { owned get; }

					[DBus (name = "FriendlyName", timeout = 120000)]
					public abstract string friendly_name { owned get; }

					[DBus (name = "Connected", timeout = 120000)]
					public abstract bool connected {  get; }

					[DBus (name = "Interface", timeout = 120000)]
					public abstract string interface { owned get; }

					[DBus (name = "LocalAddress", timeout = 120000)]
					public abstract string local_address { owned get; }

					[DBus (name = "RemoteAddress", timeout = 120000)]
					public abstract string remote_address { owned get; }

					[DBus (name = "WfdSubelements", timeout = 120000)]
					public abstract string wfd_subelements { owned get; }

					[DBus (name = "ProvisionDiscovery")]
					public signal void provision_discovery(string param0, string param1);

					[DBus (name = "GoNegRequest")]
					public signal void go_neg_request(string param0, string param1);

					[DBus (name = "FormationFailure")]
					public signal void formation_failure(string param0);
				}

				[DBus (name = "org.freedesktop.miracle.wifi.Link")]
				public interface Link : GLib.Object {

					[DBus (name = "Manage", timeout = 120000)]
					public abstract void manage() throws DBusError, IOError;

					[DBus (name = "Unmanage", timeout = 120000)]
					public abstract void unmanage() throws DBusError, IOError;

					[DBus (name = "InterfaceIndex", timeout = 120000)]
					public abstract uint interface_index {  get; }

					[DBus (name = "MACAddress", timeout = 120000)]
					public abstract string m_a_c_address { owned get; }

					[DBus (name = "InterfaceName", timeout = 120000)]
					public abstract string interface_name { owned get; }

					[DBus (name = "FriendlyName", timeout = 120000)]
					public abstract string friendly_name { owned get; set; }

					[DBus (name = "Managed", timeout = 120000)]
					public abstract bool managed {  get; }

					[DBus (name = "P2PState", timeout = 120000)]
					public abstract int p2p_state {  get; }

					[DBus (name = "P2PScanning", timeout = 120000)]
					public abstract bool p2p_scanning {  get; set; }

					[DBus (name = "WfdSubelements", timeout = 120000)]
					public abstract string wfd_subelements { owned get; set; }
				}
			}
		}
	}
}
